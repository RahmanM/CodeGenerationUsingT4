<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="helper.ttinclude" #>

<#= Configurations.GetConcatinatedString(Configurations.RepositoryInterfacesImports()) #>

namespace <#=Configurations.RepositoryInterfacesProjectNamespace#>
{

    public class <#= Configurations.DBContextName #> : DbContext
    {
        public <#= Configurations.DBContextName #> () : base("CRMConnectionString")
        {
            Database.SetInitializer<<#= Configurations.DBContextName #>>(new DropCreateDatabaseIfModelChanges<<#= Configurations.DBContextName #>>());
        }

	<# 
		var entityTypes = AssemblyHelper.GetDomainTypes();

		foreach (var type in entityTypes)
		{
	#>
			public virtual DbSet<<#= type.Name #>> <#= type.Name #>s { get; set; }
	<#
		}
	#>

	}
 }

<#
		SaveOutput(Configurations.DBContextName + ".cs", Configurations.OutputFolderName);
#>


<#+
	 void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
	
 #>